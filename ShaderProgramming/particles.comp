#version 430

layout( local_size_x = 1000 ) in;

uniform float DeltaT = 0.0005;

layout(std430, binding=0) buffer Pos {
  vec4 Position[];
};
layout(std430, binding=1) buffer Vel {
  vec4 Velocity[];
};
layout(std430, binding=2) buffer Life{
  float LifeSpan[];
};
layout(std430, binding=3) buffer Type{
  float ParticleType[];
};
layout(std430, binding=4) buffer Size{
  float ParticleSize[];
};

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}

float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

void main() {

  float velo = -0.5;

  uint idx = gl_GlobalInvocationID.x;

  vec3 p = Position[idx].xyz;

  if(ParticleType[idx] == 1 || ParticleType[idx] == 2){

	  if(LifeSpan[idx] < 0)
	  {
		if(ParticleType[idx] < 2)
		{
		  LifeSpan[idx] = random(DeltaT) * 10;
		  Position[idx] = vec4( 0.0, 0.0, 0.0, 1.0);
		  Velocity[idx].x = (random(DeltaT) - 0.5) / 10;
		  Velocity[idx].z = (random(DeltaT / 2) - 0.5) / 10;
	    }
		LifeSpan[idx] = random(DeltaT);
		ParticleSize[idx] = 0.02;
		ParticleType[idx] += 1;
	  }
	  else
	  {
		Position[idx] = vec4( p.x + Velocity[idx].x * DeltaT, p.y + velo * DeltaT, p.z + Velocity[idx].z * DeltaT, 1.0);
		LifeSpan[idx] -= DeltaT;
	  }
	}
//	else if(ParticleType[idx] == 3)
//	{
////		Position[idx] = vec4( p.x, p.y + 0.2 * DeltaT, p.z, 1.0);
////		ParticleSize[idx] = 0.04;
//		if(LifeSpan[idx] < 0)
//		{
//			LifeSpan[idx] = random(DeltaT) * 20;
//			Position[idx] = vec4( 0.0, 0.0, 0.0, 1.0);	
//			Velocity[idx].x = (random(DeltaT) - 0.5) / 10;
//			Velocity[idx].z = (random(DeltaT / 2) - 0.5) / 10;
//			ParticleType[idx] -= 1;
//			ParticleSize[idx] = 0.02;
//		 }
//		 else
//		 {
//		    Position[idx] = vec4( p.x, p.y + 0.2 * DeltaT, p.z, 1.0);
//			ParticleSize[idx] += sin(LifeSpan[idx]) / 1000;
//			LifeSpan[idx] -= DeltaT;
//		 }
//	}

	else if(ParticleType[idx] == 3)
	{
//		Position[idx] = vec4( p.x, p.y + 0.2 * DeltaT, p.z, 1.0);
//		ParticleSize[idx] = 0.04;
		if(LifeSpan[idx] < Position[idx].y)
		{
			LifeSpan[idx] = random(DeltaT) * 20;
			//Position[idx] = vec4( 0.0, 0.0, 0.0, 1.0);	
			Velocity[idx].w = 1;
			ParticleType[idx] += 1;
			ParticleSize[idx] = 0.02;
		 }
		 else
		 {
		    Position[idx] = vec4( p.x, p.y + 0.2 * DeltaT, p.z, 1.0);
			//ParticleSize[idx] += sin(Position[idx].y) / 1000;
			//LifeSpan[idx] -= DeltaT;
		 }
	}

	else if(ParticleType[idx] == 4)
	{
//		Position[idx] = vec4( p.x, p.y + 0.2 * DeltaT, p.z, 1.0);
//		ParticleSize[idx] = 0.04;
		if(LifeSpan[idx] < 0)
		{
			LifeSpan[idx] = random(DeltaT) * 20;
			Position[idx] = vec4( Position[idx].x, Position[idx].y, Position[idx].z, 1.0);	
			Velocity[idx].x = (random(DeltaT) - 0.5) / 10;
			Velocity[idx].z = (random(DeltaT / 2) - 0.5) / 10;
			ParticleType[idx] = 2;
			ParticleSize[idx] = 0.02;
		 }
		 else
		 {
		    Position[idx] = vec4( p.x, p.y, p.z, 1.0);
			ParticleSize[idx] += sin(LifeSpan[idx]) / 1000;
			LifeSpan[idx] -= DeltaT;
		 }
	}
}